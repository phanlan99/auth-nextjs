B1 :Truy c·∫≠p nextjs 

C√†i :   npx create-next-app@latest

B2 :Truy c·∫≠p monngo t·∫°o access netword and access database ƒë·ªÉ c√≥ ƒë∆∞·ª£c link :

mongodb+srv://phanlan99:phanlan99@cluster0.6aulvxn.mongodb.net/


B3 : C√†i th√™m c√°c th∆∞ vi·ªán 

npm i axios bcryptjs jsonwebtoken nodemailer react-hot-toast mongoose

| Th∆∞ vi·ªán            | D√πng ƒë·ªÉ l√†m g√¨                                                                          |
| ------------------- | --------------------------------------------------------------------------------------- |
| **axios**           | G·ª≠i request HTTP (GET, POST, PUT, DELETE,...) t·ª´ client ƒë·∫øn server. D√πng thay `fetch`.  |
| **bcryptjs**        | M√£ h√≥a m·∫≠t kh·∫©u (hash password) tr∆∞·ªõc khi l∆∞u v√†o database. D√πng cho ƒëƒÉng k√Ω/ƒëƒÉng nh·∫≠p. |
| **jsonwebtoken**    | T·∫°o v√† x√°c minh **JWT tokens** ƒë·ªÉ x√°c th·ª±c ng∆∞·ªùi d√πng (authentication).                 |
| **nodemailer**      | G·ª≠i email t·ª´ backend (v√≠ d·ª•: g·ª≠i m√£ x√°c nh·∫≠n, kh√¥i ph·ª•c m·∫≠t kh·∫©u, v.v.).                |
| **react-hot-toast** | Th∆∞ vi·ªán hi·ªÉn th·ªã **toast notification** tr√™n frontend (nhanh, ƒë·∫πp, d·ªÖ d√πng).           |
| **mongoose**        | Th∆∞ vi·ªán d√πng ƒë·ªÉ k·∫øt n·ªëi v√† thao t√°c v·ªõi MongoDB b·∫±ng c√∫ ph√°p d·ªÖ hi·ªÉu (ODM).            |

B4 : src s·∫Ω ƒë∆∞·ª£c th·ª±c hi·ªán trong app , ngo√†i ra s·∫Ω t·∫°o ra c√°c th∆∞ m·ª•c dbConfig , helper , models .

B5 : T·∫°o trang login , signup , profile l√† c√°c page.tsx

B6 : C·∫•u h√¨nh k·∫øt n·ªëi v·ªõi MongoDB b·∫±ng dbConfig



**B7 (ti·∫øp): Vi·∫øt API cho c√°c trang**
`app/api/users/signup` v√† `app/api/users/login`

#### ‚úÖ V·ªõi `signup`:

* Nh·∫≠n th√¥ng tin: `email`, `username`, `password` t·ª´ frontend.
* Ki·ªÉm tra xem user ƒë√£ t·ªìn t·∫°i ch∆∞a (`User.findOne({ email })`).
* Hash m·∫≠t kh·∫©u b·∫±ng `bcryptjs`.
* T·∫°o user m·ªõi b·∫±ng `new User(...)` v√† `.save()` v√†o MongoDB.
* Tr·∫£ v·ªÅ JSON response khi th√†nh c√¥ng ho·∫∑c l·ªói.

```ts
const salt = await bcrypt.genSalt(10)
const hashedPassword = await bcrypt.hash(password, salt)
```

---

#### ‚úÖ V·ªõi `login`:

* Nh·∫≠n `email` v√† `password`.
* T√¨m user trong MongoDB theo `email`.
* So s√°nh password nh·∫≠p v√†o v·ªõi `user.password` ƒë√£ m√£ ho√° b·∫±ng `bcrypt.compare(...)`.
* N·∫øu ƒë√∫ng, t·∫°o `JWT token` b·∫±ng `jsonwebtoken.sign(...)`.
* G·ª≠i token qua `httpOnly cookie` v·ªÅ tr√¨nh duy·ªát.

---

**B8: T·∫°o model user v·ªõi Mongoose (`models/userModel.ts`)**

```ts
import mongoose from "mongoose"

const userSchema = new mongoose.Schema({
  username: String,
  email: { type: String, unique: true },
  password: String,
  isVerified: { type: Boolean, default: false },
  isAdmin: { type: Boolean, default: false }
})

export default mongoose.models.User || mongoose.model("User", userSchema)
```

---

**B9: T·∫°o `dbConfig/dbConfig.ts` ƒë·ªÉ k·∫øt n·ªëi MongoDB**

```ts
import mongoose from "mongoose"

export async function connect() {
  try {
    await mongoose.connect(process.env.MONGO_URI!)
    console.log("‚úÖ K·∫øt n·ªëi MongoDB th√†nh c√¥ng")
  } catch (error) {
    console.log("‚ùå K·∫øt n·ªëi MongoDB th·∫•t b·∫°i:", error)
  }
}
```

‚ö†Ô∏è ƒê·ª´ng qu√™n t·∫°o file `.env`:

```
MONGO_URI=mongodb+srv://phanlan99:phanlan99@cluster0.6aulvxn.mongodb.net/
TOKEN_SECRET=your-secret-key
```

---

**B10: T·∫°o c√°c trang giao di·ªán (`signup.tsx`, `login.tsx`, `profile.tsx`)**

* S·ª≠ d·ª•ng `useState` ƒë·ªÉ l·∫•y input ng∆∞·ªùi d√πng.
* G·ª≠i `axios.post("/api/users/signup", data)` ho·∫∑c `login` t∆∞∆°ng ·ª©ng.
* Sau khi login th√†nh c√¥ng, d√πng `useRouter().push("/profile")` ƒë·ªÉ chuy·ªÉn trang.

---

**B11: Hi·ªÉn th·ªã th√¥ng b√°o b·∫±ng `react-hot-toast`**

```tsx
import toast, { Toaster } from 'react-hot-toast'

toast.success("ƒêƒÉng k√Ω th√†nh c√¥ng!")
toast.error("Sai m·∫≠t kh·∫©u!")
```

---

**B12: Ki·ªÉm tra token ƒë·ªÉ b·∫£o v·ªá route `/profile`**

* T·∫°o middleware check JWT token.
* N·∫øu kh√¥ng c√≥ token ‚Üí redirect v·ªÅ `/login`.

---

**B13: Th√™m ch·ª©c nƒÉng `logout`**

* G·ª≠i request xo√° cookie ch·ª©a token.
* Sau ƒë√≥ `router.push("/login")`.

---

üìå **T√≥m t·∫Øt ng·∫Øn g·ªçn c√°c b∆∞·ªõc ch√≠nh:**

```
1. C√†i Next.js + MongoDB URI
2. C√†i th∆∞ vi·ªán
3. C·∫•u tr√∫c th∆∞ m·ª•c: /app /api /models /dbConfig /helpers
4. Vi·∫øt model user
5. K·∫øt n·ªëi DB
6. T·∫°o API signup + login
7. T·∫°o trang giao di·ªán login/signup/profile
8. X√°c th·ª±c b·∫±ng JWT token
```

---

B·∫°n mu·ªën m√¨nh ƒë√≥ng g√≥i th√†nh t√†i li·ªáu t·ªïng h·ª£p markdown ho·∫∑c PDF ƒë·ªÉ d·ªÖ h·ªçc l·∫°i sau kh√¥ng?
